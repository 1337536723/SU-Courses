//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Ider {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="Ider.FileService")]
    public interface FileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/Add", ReplyAction="urn:FileService/AddResponse")]
        double Add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/Subtract", ReplyAction="urn:FileService/SubtractResponse")]
        double Subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/Multiply", ReplyAction="urn:FileService/MultiplyResponse")]
        double Multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/Divide", ReplyAction="urn:FileService/DivideResponse")]
        double Divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/PutFile", ReplyAction="urn:FileService/PutFileResponse")]
        bool PutFile(string name, string contents);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/GetFile", ReplyAction="urn:FileService/GetFileResponse")]
        string GetFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/OpenFileForWrite", ReplyAction="urn:FileService/OpenFileForWriteResponse")]
        bool OpenFileForWrite(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/WriteBlock", ReplyAction="urn:FileService/WriteBlockResponse")]
        bool WriteBlock(byte[] block);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/CloseFile", ReplyAction="urn:FileService/CloseFileResponse")]
        bool CloseFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/OpenFileForRead", ReplyAction="urn:FileService/OpenFileForReadResponse")]
        bool OpenFileForRead(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:FileService/ReadBlock", ReplyAction="urn:FileService/ReadBlockResponse")]
        byte[] ReadBlock();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileServiceChannel : Client.Ider.FileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<Client.Ider.FileService>, Client.Ider.FileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double n1, double n2) {
            return base.Channel.Add(n1, n2);
        }
        
        public double Subtract(double n1, double n2) {
            return base.Channel.Subtract(n1, n2);
        }
        
        public double Multiply(double n1, double n2) {
            return base.Channel.Multiply(n1, n2);
        }
        
        public double Divide(double n1, double n2) {
            return base.Channel.Divide(n1, n2);
        }
        
        public bool PutFile(string name, string contents) {
            return base.Channel.PutFile(name, contents);
        }
        
        public string GetFile() {
            return base.Channel.GetFile();
        }
        
        public bool OpenFileForWrite(string name) {
            return base.Channel.OpenFileForWrite(name);
        }
        
        public bool WriteBlock(byte[] block) {
            return base.Channel.WriteBlock(block);
        }
        
        public bool CloseFile() {
            return base.Channel.CloseFile();
        }
        
        public bool OpenFileForRead(string name) {
            return base.Channel.OpenFileForRead(name);
        }
        
        public byte[] ReadBlock() {
            return base.Channel.ReadBlock();
        }
    }
}
